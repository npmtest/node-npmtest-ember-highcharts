{"/home/travis/build/npmtest/node-npmtest-ember-highcharts/test.js":"/* istanbul instrument in package npmtest_ember_highcharts */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-highcharts/lib.npmtest_ember_highcharts.js":"/* istanbul instrument in package npmtest_ember_highcharts */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_highcharts = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_highcharts = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-highcharts/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-highcharts && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_highcharts */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_highcharts\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_highcharts.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_highcharts.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_highcharts.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_highcharts.__dirname + '/lib.npmtest_ember_highcharts.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-highcharts/node_modules/ember-highcharts/index.js":"/* eslint-env node */\n'use strict';\n\nvar Funnel = require('broccoli-funnel');\nvar mergeTrees = require('broccoli-merge-trees');\nvar path = require('path');\n\nmodule.exports = {\n  name: 'ember-highcharts',\n\n  included: function(target) {\n    this._super.included.apply(this, arguments);\n\n    var app = target.app || target;\n    var options = app.options.emberHighCharts || { includeHighCharts: true };\n    var highchartsPath = 'vendor/highcharts';\n\n    if (options.includeHighCharts) {\n      app.import(path.join(highchartsPath, 'highcharts.src.js'));\n    }\n\n    if (options.includeHighStock) {\n      app.import(path.join(highchartsPath, 'highstock.src.js'));\n    }\n\n    if (options.includeHighMaps) {\n      app.import(path.join(highchartsPath, 'highmaps.src.js'));\n    }\n\n    if (options.includeHighChartsMore) {\n      app.import(path.join(highchartsPath, 'highcharts-more.src.js'));\n    }\n\n    if (options.includeHighCharts3D) {\n      // boost module need to be imported before highcharts-3d\n      if (options.includeModules) {\n        var boostIndex = options.includeModules.indexOf('boost');\n        if (boostIndex !== -1) {\n          app.import(path.join(highchartsPath, 'modules', 'boost.src.js'));\n          options.includeModules.splice(boostIndex, 1);\n        }\n      }\n\n      app.import(path.join(highchartsPath, 'highcharts-3d.src.js'));\n    }\n\n    if (options.includeModules) {\n      var modules = options.includeModules;\n      for (var i = 0; i < modules.length; i++) {\n        var moduleFilename = modules[i] + '.src.js';\n        app.import(path.join(highchartsPath, 'modules', moduleFilename));\n      }\n    }\n  },\n\n  treeForVendor: function(vendorTree) {\n    var trees = [];\n    var highchartsPath = path.dirname(require.resolve('highcharts'));\n\n    if (vendorTree) {\n      trees.push(vendorTree);\n    }\n\n    trees.push(new Funnel(highchartsPath, {\n      destDir: 'highcharts'\n    }));\n\n    return mergeTrees(trees);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-highcharts/node_modules/ember-highcharts/config/environment.js":"/* eslint-env node */\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-highcharts/node_modules/ember-highcharts/addon/components/high-charts.js":"/* global Highcharts */\nimport Ember from 'ember';\nimport { setDefaultHighChartOptions } from '../utils/option-loader';\nimport { getSeriesMap, getSeriesChanges } from '../utils/chart-data';\nimport layout from 'ember-highcharts/templates/components/high-charts';\n\nconst {\n  Component,\n  computed,\n  get,\n  getOwner,\n  getProperties,\n  set,\n  run,\n  $\n} = Ember;\n\nconst assign = Ember.assign || Ember.merge;\n\nexport default Component.extend({\n  layout,\n  classNames: ['highcharts-wrapper'],\n  content: undefined,\n  mode: undefined,\n  chartOptions: undefined,\n  chart: null,\n  theme: undefined,\n  callback: undefined,\n\n  buildOptions: computed('chartOptions', 'content.[]', function() {\n    let chartOptions = $.extend(true, {}, get(this, 'theme'), get(this, 'chartOptions'));\n    let chartContent = get(this, 'content');\n\n    // if 'no-data-to-display' module has been imported, keep empty series and leave it to highcharts to show no data label.\n    if (!get(this, 'content.length') && !Highcharts.Chart.prototype.showNoData) {\n      chartContent = [{\n        id: 'noData',\n        data: 0,\n        color: '#aaaaaa'\n      }];\n    }\n\n    let defaults = { series: chartContent };\n\n    return assign(defaults, chartOptions);\n  }),\n\n  didReceiveAttrs() {\n    this._super(...arguments);\n\n    let { content, chart, mode } = getProperties(this, 'content', 'chart', 'mode');\n\n    if (!content || !chart) {\n      return;\n    }\n\n    let isStockChart = mode === 'StockChart';\n\n    // create maps to make series data easier to work with\n    let contentSeriesMap = getSeriesMap(content);\n    let chartSeriesMap = getSeriesMap(chart.series);\n\n    // remove and update current series\n    let chartSeriesToRemove = [];\n\n    chart.series.forEach((series) => {\n      if (isStockChart && series.name === 'Navigator') {\n        return;\n      }\n\n      let contentSeries = contentSeriesMap[series.name];\n\n      if (!contentSeries) {\n        return chartSeriesToRemove.push(series);\n      }\n\n      let updatedKeys = getSeriesChanges(contentSeries, series);\n\n      // call series.update() when other series attributes like pointStart have changed\n      if (updatedKeys.length) {\n        series.update(contentSeries, false);\n      } else {\n        series.setData(contentSeries.data, false);\n      }\n    });\n\n    chartSeriesToRemove.forEach((series) => series.remove(false));\n\n    // add new series\n    content.forEach((contentSeries) => {\n      if (!chartSeriesMap.hasOwnProperty(contentSeries.name)) {\n        chart.addSeries(contentSeries, false);\n      }\n    });\n\n    // reset navigator data\n    if (isStockChart && chart.xAxis.length) {\n      chart.xAxis[0].setExtremes();\n    }\n\n    return chart.redraw();\n  },\n\n  drawAfterRender() {\n    run.scheduleOnce('afterRender', this, 'draw');\n  },\n\n  draw() {\n    let $element = this.$('.chart-container');\n    let mode = get(this, 'mode');\n    let completeChartOptions = [get(this, 'buildOptions'), get(this, 'callback')];\n\n    if (typeof mode === 'string' && !!mode) {\n      completeChartOptions.unshift(mode);\n    }\n\n    if ($element) {\n      let chart = $element.highcharts(...completeChartOptions).highcharts();\n      set(this, 'chart', chart);\n    }\n  },\n\n  didInsertElement() {\n    this._super(...arguments);\n\n    this.drawAfterRender();\n    setDefaultHighChartOptions(getOwner(this));\n  },\n\n  willDestroyElement() {\n    this._super(...arguments);\n\n    if (get(this, 'chart')) {\n      get(this, 'chart').destroy();\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-highcharts/node_modules/ember-highcharts/addon/utils/chart-data.js":"export function getSeriesMap(seriesGroup) {\n  let seriesMap = seriesGroup.reduce((seriesMap, seriesItem) => {\n    seriesMap[seriesItem.name] = seriesItem;\n    return seriesMap;\n  }, {});\n\n  return seriesMap;\n}\n\nexport function getSeriesChanges(contentSeries, series) {\n  let updatedKeys = Object.keys(contentSeries).filter((key) => {\n    let isValidKey = key !== 'data' && key.charAt(0) !== '_';\n    let isValidType = ['object', 'function'].indexOf(typeof contentSeries[key]) === -1;\n    let isTheSame = contentSeries[key] === series[key];\n\n    return isValidKey && isValidType && !isTheSame;\n  });\n\n  // returns a list of updated keys\n  return updatedKeys;\n}\n","/home/travis/build/npmtest/node-npmtest-ember-highcharts/node_modules/ember-highcharts/addon/utils/option-loader.js":"/* global Highcharts */\nlet localConfig = null;\n\nexport function setDefaultHighChartOptions(owner) {\n  if (!localConfig) {\n    // use options defined in highcharts-configs/application.js if they exist\n    let configFactory = owner.factoryFor('highcharts-config:application');\n\n    if (configFactory && configFactory.class) {\n      let localConfigBuilder = configFactory.class;\n      localConfig = localConfigBuilder(defaultOptions);\n    } else {\n      localConfig = defaultOptions;\n    }\n  }\n\n  Highcharts.setOptions(localConfig);\n}\n\nlet defaultOptions = {\n  plotOptions: {\n    series: {\n      shadow: false\n    }\n  },\n\n  global: {\n    timezoneOffset: new Date().getTimezoneOffset()\n  },\n\n  credits: {\n    enabled: false\n  }\n};\n"}